// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package storage

import (
	"encoding/json"
	"github.com/mailru/easyjson"
	"github.com/mailru/easyjson/jlexer"
	"github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson305a78f8DecodeInmemoryStorageInternalAppStorage(in *jlexer.Lexer, out *MapEntry) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Key":
			if in.IsNull() {
				in.Skip()
				out.Key = nil
			} else {
				out.Key = in.Bytes()
			}
		case "Next":
			if in.IsNull() {
				in.Skip()
				out.Next = nil
			} else {
				if out.Next == nil {
					out.Next = new(MapEntry)
				}
				(*out.Next).UnmarshalEasyJSON(in)
			}
		case "Value":
			easyjson305a78f8DecodeInmemoryStorageInternalAppStorage1(in, &out.Value)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson305a78f8EncodeInmemoryStorageInternalAppStorage(out *jwriter.Writer, in MapEntry) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Key\":"
		out.RawString(prefix[1:])
		out.Base64Bytes(in.Key)
	}
	{
		const prefix string = ",\"Next\":"
		out.RawString(prefix)
		if in.Next == nil {
			out.RawString("null")
		} else {
			(*in.Next).MarshalEasyJSON(out)
		}
	}
	{
		const prefix string = ",\"Value\":"
		out.RawString(prefix)
		easyjson305a78f8EncodeInmemoryStorageInternalAppStorage1(out, in.Value)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v MapEntry) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson305a78f8EncodeInmemoryStorageInternalAppStorage(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v MapEntry) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson305a78f8EncodeInmemoryStorageInternalAppStorage(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *MapEntry) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson305a78f8DecodeInmemoryStorageInternalAppStorage(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *MapEntry) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson305a78f8DecodeInmemoryStorageInternalAppStorage(l, v)
}
func easyjson305a78f8DecodeInmemoryStorageInternalAppStorage1(in *jlexer.Lexer, out *Item) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Expiration":
			out.Expiration = int64(in.Int64())
		case "Value":
			if in.IsNull() {
				in.Skip()
				out.Value = nil
			} else {
				out.Value = in.Bytes()
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson305a78f8EncodeInmemoryStorageInternalAppStorage1(out *jwriter.Writer, in Item) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Expiration\":"
		out.RawString(prefix[1:])
		out.Int64(int64(in.Expiration))
	}
	{
		const prefix string = ",\"Value\":"
		out.RawString(prefix)
		out.Base64Bytes(in.Value)
	}
	out.RawByte('}')
}
func easyjson305a78f8DecodeInmemoryStorageInternalAppStorage2(in *jlexer.Lexer, out *List) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Head":
			if in.IsNull() {
				in.Skip()
				out.Head = nil
			} else {
				if out.Head == nil {
					out.Head = new(MapEntry)
				}
				(*out.Head).UnmarshalEasyJSON(in)
			}
		case "Size":
			out.Size = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson305a78f8EncodeInmemoryStorageInternalAppStorage2(out *jwriter.Writer, in List) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Head\":"
		out.RawString(prefix[1:])
		if in.Head == nil {
			out.RawString("null")
		} else {
			(*in.Head).MarshalEasyJSON(out)
		}
	}
	{
		const prefix string = ",\"Size\":"
		out.RawString(prefix)
		out.Int(int(in.Size))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v List) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson305a78f8EncodeInmemoryStorageInternalAppStorage2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v List) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson305a78f8EncodeInmemoryStorageInternalAppStorage2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *List) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson305a78f8DecodeInmemoryStorageInternalAppStorage2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *List) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson305a78f8DecodeInmemoryStorageInternalAppStorage2(l, v)
}
func easyjson305a78f8DecodeInmemoryStorageInternalAppStorage3(in *jlexer.Lexer, out *HashMap) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "M":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.M = make(map[int]*List)
				} else {
					out.M = nil
				}
				for !in.IsDelim('}') {
					key := int(in.IntStr())
					in.WantColon()
					var v7 *List
					if in.IsNull() {
						in.Skip()
						v7 = nil
					} else {
						if v7 == nil {
							v7 = new(List)
						}
						(*v7).UnmarshalEasyJSON(in)
					}
					(out.M)[key] = v7
					in.WantComma()
				}
				in.Delim('}')
			}
		case "BucketSize":
			out.BucketSize = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson305a78f8EncodeInmemoryStorageInternalAppStorage3(out *jwriter.Writer, in HashMap) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"M\":"
		out.RawString(prefix[1:])
		if in.M == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v8First := true
			for v8Name, v8Value := range in.M {
				if v8First {
					v8First = false
				} else {
					out.RawByte(',')
				}
				out.IntStr(int(v8Name))
				out.RawByte(':')
				if v8Value == nil {
					out.RawString("null")
				} else {
					(*v8Value).MarshalEasyJSON(out)
				}
			}
			out.RawByte('}')
		}
	}
	{
		const prefix string = ",\"BucketSize\":"
		out.RawString(prefix)
		out.Int(int(in.BucketSize))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v HashMap) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson305a78f8EncodeInmemoryStorageInternalAppStorage3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v HashMap) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson305a78f8EncodeInmemoryStorageInternalAppStorage3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *HashMap) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson305a78f8DecodeInmemoryStorageInternalAppStorage3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *HashMap) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson305a78f8DecodeInmemoryStorageInternalAppStorage3(l, v)
}
